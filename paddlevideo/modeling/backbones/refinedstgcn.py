from ..registry import BACKBONES
import paddle.nn as nn
import math
import paddle
import paddle.nn.initializer as init
import numpy as np
from scipy import special

def weight_init_(layer,
                 func,
                 weight_name=None,
                 bias_name=None,
                 bias_value=0.0,
                 **kwargs):
    """
    In-place params init function.
    Usage:
    .. code-block:: python

        import paddle
        import numpy as np

        data = np.ones([3, 4], dtype='float32')
        linear = paddle.nn.Linear(4, 4)
        input = paddle.to_tensor(data)
        print(linear.weight)
        linear(input)

        weight_init_(linear, 'Normal', 'fc_w0', 'fc_b0', std=0.01, mean=0.1)
        print(linear.weight)
    """

    if hasattr(layer, 'weight') and layer.weight is not None:
        getattr(init, func)(**kwargs)(layer.weight)
        if weight_name is not None:
            # override weight name
            layer.weight.name = weight_name

    if hasattr(layer, 'bias') and layer.bias is not None:
        init.Constant(bias_value)(layer.bias)
        if bias_name is not None:
            # override bias name
            layer.bias.name = bias_name

def _no_grad_trunc_normal_(tensor, mean, std, a, b):

    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.")

    with paddle.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to [2l-1, 2u-1].
        tmp = np.random.uniform(2*l-1, 2*u-1, size=list(tensor.shape)).astype(np.float32)

        # Use inverse cdf transform for normal distribution to get truncated 
        # standard normal
        tmp = special.erfinv(tmp)

        # Transform to proper mean, std
        tmp *= (std * math.sqrt(2.0))
        tmp += mean

        # Clamp to ensure it's in the proper range
        tmp = np.clip(tmp, a, b)
        tensor.set_value(paddle.to_tensor(tmp))

        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def zero(x):
    return 0


def iden(x):
    return x


def einsum(x, A):
    """paddle.einsum will be implemented in release/2.2.
    """
    x = x.transpose((0, 2, 3, 1, 4)) #通道重排。
    n, c, t, k, v = x.shape
    k2, v2, w = A.shape
    assert (k == k2 and v == v2), "Args of einsum not match!"
    x = x.reshape((n, c, t, k * v)) #把输入reshape成(n, c, t, k*v)四维的一个张量。为什么要把k, v合并了？因为k表示视频中的人数，v是关节点的数量。
    A = A.reshape((k * v, w))
    y = paddle.matmul(x, A) #这里使用的是矩阵相乘的操作，不是逐个元素相乘的操作，理论上说的是能够学习到不存在的连接。

    return y

#获得hop distance跳度， 为了使用最小跳数获得采样函数。
def get_hop_distance(num_node, edge, max_hop=1): 
    A = np.zeros((num_node, num_node)) #猜测为图矩阵。
    for i, j in edge:
        A[j, i] = 1
        A[i, j] = 1

    # compute hop steps
    hop_dis = np.zeros((num_node, num_node)) + np.inf #np.inf标示正无穷。
    transfer_mat = [np.linalg.matrix_power(A, d) for d in range(max_hop + 1)]
    arrive_mat = (np.stack(transfer_mat) > 0)
    for d in range(max_hop, -1, -1):
        hop_dis[arrive_mat[d]] = d
    return hop_dis


def normalize_digraph(A):
    Dl = np.sum(A, 0)
    num_node = A.shape[0]
    Dn = np.zeros((num_node, num_node))
    for i in range(num_node):
        if Dl[i] > 0:
            Dn[i, i] = Dl[i]**(-1)
    AD = np.dot(A, Dn)
    return AD


class Graph():
    def __init__(self,
                 layout='openpose',
                 strategy='spatial',
                 max_hop=1,
                 dilation=1):
        self.max_hop = max_hop
        self.dilation = dilation

        self.get_edge(layout)
        self.hop_dis = get_hop_distance(self.num_node,
                                        self.edge,
                                        max_hop=max_hop)
        self.get_adjacency(strategy)

    def __str__(self):
        return self.A

    def get_edge(self, layout):
        # edge is a list of [child, parent] paris

        if layout == 'fsd10':
            self.num_node = 25 #总共关节点个数， 
            self_link = [(i, i) for i in range(self.num_node)] #需要一个25x25的矩阵来表示图。
            neighbor_link = [(1, 8), (0, 1), (15, 0), (17, 15), (16, 0),
                             (18, 16), (5, 1), (6, 5), (7, 6), (2, 1), (3, 2),
                             (4, 3), (9, 8), (10, 9), (11, 10), (24, 11),
                             (22, 11), (23, 22), (12, 8), (13, 12), (14, 13),
                             (21, 14), (19, 14), (20, 19)]
            self.edge = self_link + neighbor_link
            self.center = 8 #关节点中心。
        elif layout == 'ntu-rgb+d':
            self.num_node = 25
            self_link = [(i, i) for i in range(self.num_node)]
            neighbor_1base = [(1, 2), (2, 21), (3, 21), (4, 3), (5, 21), (6, 5),
                              (7, 6), (8, 7), (9, 21), (10, 9), (11, 10),
                              (12, 11), (13, 1), (14, 13), (15, 14), (16, 15),
                              (17, 1), (18, 17), (19, 18), (20, 19), (22, 23),
                              (23, 8), (24, 25), (25, 12)]
            neighbor_link = [(i - 1, j - 1) for (i, j) in neighbor_1base]
            self.edge = self_link + neighbor_link
            self.center = 21 - 1
        else:
            raise ValueError("Do Not Exist This Layout.")

    def get_adjacency(self, strategy):
        valid_hop = range(0, self.max_hop + 1, self.dilation)
        adjacency = np.zeros((self.num_node, self.num_node))
        for hop in valid_hop:
            adjacency[self.hop_dis == hop] = 1
        normalize_adjacency = normalize_digraph(adjacency)

        if strategy == 'spatial': #空间图卷积。
            A = []
            for hop in valid_hop:
                a_root = np.zeros((self.num_node, self.num_node))
                a_close = np.zeros((self.num_node, self.num_node))
                a_further = np.zeros((self.num_node, self.num_node))
                for i in range(self.num_node):
                    for j in range(self.num_node):
                        if self.hop_dis[j, i] == hop:
                            if self.hop_dis[j, self.center] == self.hop_dis[
                                    i, self.center]:
                                a_root[j, i] = normalize_adjacency[j, i]
                            elif self.hop_dis[j, self.center] > self.hop_dis[
                                    i, self.center]:
                                a_close[j, i] = normalize_adjacency[j, i]
                            else:
                                a_further[j, i] = normalize_adjacency[j, i]
                if hop == 0:
                    A.append(a_root)
                else:
                    A.append(a_root + a_close)
                    A.append(a_further)
            A = np.stack(A)
            self.A = A
        else:
            raise ValueError("Do Not Exist This Strategy")

def conv_branch_init(conv, branches):
    weight = conv.weight_attr
    n = weight.shape[0]
    k1 = weight.shape[1]
    k2 = weight.shape[2]
    nn.init.normal_(weight, 0, math.sqrt(2. / (n * k1 * k2 * branches)))
    nn.init.constant_(conv.bias, 0)

#只需要修改gcn模块即可。
#时序上的图卷积。
class ConvTemporalGraphical(nn.Layer): 
    def __init__(self,
                 in_channels,
                 out_channels,
                 kernel_size,
                 A, 
                 Adaptive = True,
                 Attention = True,
                 t_kernel_size=1,
                 t_stride=1,
                 t_padding=0,
                 t_dilation=1):
        super().__init__()

        self.inter_c = out_channels // 4
        self.out_c = out_channels
        self.in_c = in_channels

        self.conv_d = nn.LayerList()
        for i in range(3):
            self.conv_d.append(nn.Conv2D(in_channels, out_channels, 1))

        if Adaptive:
            self.PA = paddle.static.create_parameter(shape=A.shape, dtype='float32')

            self.alpha = paddle.static.create_parameter(shape=[1], dtype='float32')
            self.conv_a = nn.LayerList()
            self.conv_b = nn.LayerList()
            for i in range(3):
                self.conv_a.append(nn.Conv2D(in_channels, self.inter_c, 1))
                self.conv_b.append(nn.Conv2D(in_channels, self.inter_c, 1))

        self.Adaptive = Adaptive

        if Attention:
            # temporal attention
            self.conv_TA = nn.Conv1D(out_channels, 1, 9, padding=4)


            # s attention
            self.conv_SA = nn.Conv1D(out_channels, 1, 25, padding=24 // 2, 
                                                    weight_attr=nn.initializer.Constant(value=0.0))
            nn.initializer.XavierNormal(self.conv_SA.weight)
            

            #channel attention
            self.fc1 = nn.Linear(out_channels, out_channels // 2, 
                                                    bias_attr=nn.initializer.Constant(value=0.0))
            nn.initializer.KaimingNormal(self.fc1.weight)
            self.fc2 = nn.Linear(out_channels // 2, out_channels, 
                                                    weight_attr=nn.initializer.Constant(value=0.0), 
                                                    bias_attr=nn.initializer.Constant(value=0.0))
        self.Attention = Attention

        self.bn = nn.BatchNorm2D(out_channels)
        self.bn.bias_attr = nn.initializer.Constant(value=0)
        self.bn.weight_attr = nn.initializer.Constant(value=1e-6)
        self.soft = nn.Softmax(-2)
        self.tan = nn.Tanh()
        self.sigmoid = nn.Sigmoid()
        self.relu = nn.ReLU()
        if in_channels != out_channels:
            self.down = nn.Sequential(
                nn.Conv2D(in_channels, out_channels, 1),
                nn.BatchNorm2D(out_channels)
            )
        else:
            self.down = lambda x: x

        self.kernel_size = kernel_size
        self.conv = nn.Conv2D(in_channels,
                              out_channels * kernel_size,
                              kernel_size=(t_kernel_size, 1),
                              padding=(t_padding, 0),
                              stride=(t_stride, 1),
                              dilation=(t_dilation, 1))
        for layer in self.sublayers():
            if isinstance(layer, nn.Conv2D):
                nn.initializer.KaimingNormal(layer.weight)
            elif isinstance(layer, nn.BatchNorm2D):
                layer.bias_attr = nn.initializer.Constant(value=0.0)
                layer.weight_attr = nn.initializer.Constant(value=1.0)

    def forward(self, x, A):
        assert A.shape[0] == self.kernel_size

        #修改后的gcn模块.
        N, C, T, V = x.shape
        y = None
        if self.Adaptive:
            A = self.PA
            for i in range(3):
                A1 = self.conv_a[i](x).transpose((0, 3, 1, 2)).reshape((N, V, self.inter_c * T))
                A2 = self.conv_b[i](x).reshape((N, self.inter_c * T, V))
                A1 = self.tan(paddle.matmul(A1, A2) / A1.shape[-1])
                A1 = A[i] + A1 * self.alpha
                A2 = x.reshape((N, C * T, V))
                z = self.conv_d[i](paddle.matmul(A2, A1).reshape((N, C, T, V)))
                y = z + y if y is not None else z
        else:
            raise ValueError("You have to use Adaptive Graph")

        y = self.bn(y)
        y += self.down(x)
        y = self.relu(y)
        
        if self.Attention:
            # spatial attetnion
            SA = y.mean(-2)
            SA_1 = self.sigmoid(self.conv_SA(SA))
            y = y * (paddle.unsqueeze(SA_1, -2)) + y

            # temporal attention
            TA = y.mean(-1)
            TA_1 = self.sigmoid(self.conv_TA(TA))
            y = y * (paddle.unsqueeze(TA_1, -1)) + y

            # channel attention
            CA = y.mean(-1).mean(-1)
            CA_1 = self.relu(self.fc1(CA))
            CA_2 = self.sigmoid(self.fc2(CA_1))
            y = y * (paddle.unsqueeze(paddle.unsqueeze(CA_2, -1), -1)) + y

        return y, A

class tcn_unit(nn.Layer):
    def __init__(self, in_channels, out_channels, kernel_size, stride):
        super(tcn_unit, self).__init__()
        self.conv = nn.Conv2D(
                in_channels,
                out_channels,
                (kernel_size[0], 1),
                (stride, 1),
                padding = ((kernel_size[0] - 1) // 2, 0), 
                bias_attr=nn.initializer.Constant(value=0.0)
            )
        self.bn = nn.BatchNorm2D(out_channels)
        self.bn.weight_attr = nn.initializer.Constant(value=1.0)
        self.bn.bias_attr = nn.initializer.Constant(value=0.0)
        nn.initializer.KaimingNormal(self.conv.weight)
    def forward(self, x):
        x = self.bn(self.conv(x))
        return x

class st_gcn_block(nn.Layer):
    def __init__(self,
                 in_channels,
                 out_channels,
                 kernel_size,
                 A, 
                 Adaptive = True,
                 Attention = True,
                 stride=1,
                 residual=True):
        super(st_gcn_block, self).__init__()

        assert len(kernel_size) == 2
        assert kernel_size[0] % 2 == 1

        self.gcn = ConvTemporalGraphical(in_channels, out_channels,
                                        kernel_size[1], 
                                        A, 
                                        Adaptive = Adaptive,
                                        Attention = Adaptive,)

        self.tcn = tcn_unit(out_channels, out_channels, kernel_size, stride)

        if not residual:
            self.residual = zero

        elif (in_channels == out_channels) and (stride == 1):
            self.residual = iden

        else:
            self.residual = nn.Sequential(
                nn.Conv2D(in_channels,
                          out_channels,
                          kernel_size=1,
                          stride=(stride, 1)),
                nn.BatchNorm2D(out_channels),
            )

        self.relu = nn.ReLU()

    def forward(self, x, A):
        res = self.residual(x)
        x, A = self.gcn(x, A)
        x = self.tcn(x) + res
        return self.relu(x), A


@BACKBONES.register()
class REFINEDSTGCN(nn.Layer):
    """
    ST-GCN model from:
    `"Spatial Temporal Graph Convolutional Networks for Skeleton-Based Action Recognition" <https://arxiv.org/abs/1801.07455>`_
    Args:
        in_channels: int, channels of vertex coordinate. 2 for (x,y), 3 for (x,y,z). Default 2.
        edge_importance_weighting: bool, whether to use edge attention. Default True.
        data_bn: bool, whether to use data BatchNorm. Default True.
    """
    def __init__(self,
                 in_channels=2,
                 data_bn=True,
                 layout='fsd10',
                 strategy='spatial',
                 **kwargs):
        super(REFINEDSTGCN, self).__init__()
        self.data_bn = data_bn
        # load graph
        self.graph = Graph(
            layout=layout,
            strategy=strategy,
        )

        #修改后的写法：
        A = self.graph.A
        # build networks
        spatial_kernel_size = A.shape[0]
        temporal_kernel_size = 9
        kernel_size = (temporal_kernel_size, spatial_kernel_size)
        self.data_bn = nn.BatchNorm1D(in_channels *
                                      A.shape[1]) if self.data_bn else iden
        kwargs0 = {k: v for k, v in kwargs.items() if k != 'dropout'}
        self.st_gcn_networks = nn.LayerList((
            st_gcn_block(in_channels,
                         64,
                         kernel_size,
                         A, 
                         True, 
                         True,
                         1,
                         residual=False,
                         **kwargs0),
            st_gcn_block(64, 64, kernel_size, A, True, True, 1, **kwargs),
            st_gcn_block(64, 64, kernel_size, A, True, True, 1, **kwargs),
            st_gcn_block(64, 64, kernel_size, A, True, True, 1, **kwargs),
            st_gcn_block(64, 128, kernel_size, A, True, True, 2, **kwargs),
            st_gcn_block(128, 128, kernel_size, A, True, True, 1, **kwargs),
            st_gcn_block(128, 128, kernel_size, A, True, True, 1, **kwargs),
            st_gcn_block(128, 256, kernel_size, A, True, True, 2, **kwargs),
            st_gcn_block(256, 256, kernel_size, A, True, True, 1, **kwargs),
            st_gcn_block(256, 256, kernel_size, A, True, True, 1, **kwargs),
        ))

        self.pool = nn.AdaptiveAvgPool2D(output_size=(1, 1))

    def init_weights(self):
        """Initiate the parameters.
        """
        for layer in self.sublayers():
            if isinstance(layer, nn.Conv2D):
                weight_init_(layer, 'Normal', mean=0.0, std=0.02)
            elif isinstance(layer, nn.BatchNorm2D):
                weight_init_(layer, 'Normal', mean=1.0, std=0.02)
            elif isinstance(layer, nn.BatchNorm1D):
                weight_init_(layer, 'Normal', mean=1.0, std=0.02)

    def forward(self, x):
        A = self.graph.A
        # data normalization
        N, C, T, V, M = x.shape
        x = x.transpose((0, 4, 3, 1, 2))  # N, M, V, C, T
        x = x.reshape((N * M, V * C, T))
        if self.data_bn:
            x.stop_gradient = False
        x = self.data_bn(x)
        x = x.reshape((N, M, V, C, T))
        x = x.transpose((0, 1, 3, 4, 2))  # N, M, C, T, V
        x = x.reshape((N * M, C, T, V)) #输入到st_gcn_blocks的shape为（N*M, C, T, V）.

        # forward
        for gcn in self.st_gcn_networks:
            x, A = gcn(x, A) #换成paddle.matmul()两个tensor矩阵相乘的操作。

        x = self.pool(x)  # NM,C,T,V --> NM,C,1,1
        C = x.shape[1]
        x = paddle.reshape(x, (N, M, C, 1, 1)).mean(axis=1)  # N,C,1,1
        
        return x
